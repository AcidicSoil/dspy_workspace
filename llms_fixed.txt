# Agents SDK

> ## Project Purpose

Remember:

- Agent-based architecture for LLM workflows
- Function tools for agent capabilities
- Handoff mechanism for routing between agents
- Structured outputs using OpenAI's structured outputs feature
- Session memory for maintaining conversation history
- Tracing for monitoring and debugging agent behavior
- Integration with external systems like Temporal, Logfire, AgentOps, Braintrust, Scorecard, and Keywords AI
- The architecture of the Agents SDK is built around core components including agents (with instructions, tools, and optional output types), runners that execute the agent loop until final output, session managers for conversation history, and tracing systems for observability. It supports both synchronous and asynchronous execution, allows for custom session implementations via a protocol, and integrates with external services through pluggable tracing processors. The SDK leverages libraries like Pydantic for data validation, LiteLLM for unified LLM access, and uv for development tooling.
- src/agents
- tests
- examples
- src/agents/__init__.py
- src/agents/agent.py
- src/agents/models.py
- src/agents/realtime.py
- src/agents/voice.py
- ### Build System
- hatchling
- ### Dependencies
- openai>=1.107.1,<2
- pydantic>=2.10, <3
- griffe>=1.5.6, <2
- typing-extensions>=4.12.2, <5
- requests>=2.0, <3
- types-requests>=2.0, <3
- mcp>=1.11.0, <2
- ### Optional Dependencies
- voice: numpy>=2.2.0, <3; websockets>=15.0, <16
- viz: graphviz>=0.17
- litellm: litellm>=1.67.4.post1, <2
- realtime: websockets>=15.0, <16
- sqlalchemy: SQLAlchemy>=2.0; asyncpg>=0.29.0
- ### Development Dependencies
- mypy
- ruff==0.9.2
- pytest
- pytest-asyncio
- pytest-mock>=3.14.0
- rich>=13.1.0, <14
- mkdocs>=1.6.0
- mkdocs-material>=9.6.0
- mkdocstrings[python]>=0.28.0
- mkdocs-static-i18n
- coverage>=7.6.12
- playwright==1.50.0
- inline-snapshot>=0.20.7
- pynput
- types-pynput
- sounddevice
- textual
- websockets
- graphviz
- mkdocs-static-i18n>=1.3.0
- eval-type-backport>=0.2.2
- fastapi >= 0.110.0, <1
- aiosqlite>=0.21.0
- ### Basic Agent Creation
- ```python
- from agents_sdk import Agent
- # Create an agent with function tools
- agent = Agent(
- name="CustomerServiceAgent",
- functions=[
- get_customer_info,
- process_return,
- check_inventory
- ]
- )
- ```
- ### Function Tool Integration
- ```python
- @tool
- def calculate_discount(price: float, discount_percent: float) -> float:
- return price * (1 - discount_percent / 100)
- agent = Agent(name="SalesAgent", functions=[calculate_discount])
- ```
- ### Agent Handoff Mechanism
- ```python
- # Agent A handles general inquiries, hands off complex issues to Agent B
- def route_to_specialist(query):
- if "technical" in query.lower():
- return specialist_agent
- else:
- return general_agent
- agent = Agent(name="RoutingAgent", handoff_function=route_to_specialist)
- ```
- ### Structured Outputs
- ```python
- from typing import List
- from pydantic import BaseModel
- class CustomerFeedback(BaseModel):
- rating: int
- comment: str
- category: str
- agent = Agent(name="FeedbackAgent", output_schema=CustomerFeedback)
- ```
- ### Session Memory Management
- ```python
- from agents_sdk import SessionMemory
- session = SessionMemory(agent_id="customer_123")
- agent = Agent(name="ChatAgent", memory=session)
- ```
- ### External Tracing Integration
- ```python
- # Integrate with Logfire for monitoring
- from agents_sdk import LogfireTracer
- tracer = LogfireTracer()
- agent = Agent(name="TracedAgent", tracer=tracer)
- ```

<project title="Mastra" summary="To provide a comprehensive understanding of Mastra's agent functionality for developers and enterprises.">**Remember:**
- agents
- tools
- workflows
- RAG<docs><doc title="README" desc="overview and usage."># Changesets

Hello and welcome! This folder has been automatically generated by `@changesets/cli`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)</doc><doc title="Algolia Setup" desc="docs page."># Algolia Search Setup

This documentation site has been migrated from Pagefind to Algolia for search functionality. Follow these steps to set up Algolia search.

## Prerequisites

1. An Algolia account (sign up at [algolia.com](https://www.algolia.com/))
2. An Algolia application with a search index

## Environment Variables

Create a `.env` file in the `docs` directory with the following variables:

```bash
# Required for search functionality
NEXT_PUBLIC_ALGOLIA_APP_ID=your_algolia_app_id
NEXT_PUBLIC_ALGOLIA_SEARCH_API_KEY=your_algolia_search_api_key
```

## Getting Your Algolia Credentials

1. **App ID**: Found in your Algolia dashboard under "Settings" ‚Üí "API Keys"
2. **Search API Key**: The public search-only API key from the same location

## Index Configuration

The search hook expects an index named `crawler_mastra crawler` by default. You can customize this by passing `indexName` in the search options:

```typescript
const searchOptions: AlgoliaSearchOptions = {
  indexName: "crawler_mastra crawler",
  hitsPerPage: 20,
  attributesToRetrieve: ["title", "content", "url", "hierarchy"],
  attributesToHighlight: ["title", "content"],
  highlightPreTag: "<mark>",
  highlightPostTag: "</mark>",
};
```

## Indexing Your Content

You'll need to set up a process to index your documentation content. This can be done using:

1. **Algolia Crawler**: Automated web crawling
2. **DocSearch**: Algolia's documentation-specific solution
3. **Custom indexing script**: Using the Algolia API

We currently have a web crawler that indexes the content of the website daily.</doc><doc title="Changelog" desc="docs page."># docs

## 0.1.2

### Patch Changes

- e3212c4: Removes references to unimplemented workflow APIs
- 82197f8: Update PG vector to allow for multiple index types
- 99dcdb5: Inject primitives into condition function, and renames getStepPayload to getStepResult.
- 2e0fe6d: Added example and updated docs

## 0.1.2-alpha.2

### Patch Changes

- e3212c4: Removes references to unimplemented workflow APIs
- 99dcdb5: Inject primitives into condition function, and renames getStepPayload to getStepResult.

## 0.1.2-alpha.1

### Patch Changes

- 82197f8: Update PG vector to allow for multiple index types

## 0.1.2-alpha.0

### Patch Changes

- 2e0fe6d: Added example and updated docs

## 0.1.1

### Patch Changes

- d59f1a8: Added example docs for evals and export metricJudge

## 0.1.1-alpha.0

### Patch Changes

- d59f1a8: Added example docs for evals and export metricJudge

## 0.1.0

### Minor Changes

- 74b3078: Reduce verbosity in workflows API
- 8b416d9: Breaking changes

### Patch Changes

- 016493a: Deprecate metrics in favor of evals
- 5fdc87c: Update evals storage in attachListeners
- 7892533: Updated test evals to use Mastra Storage
- 9c10484: update all packages
- ab04ad9: Update imports in docs
- a10b7a3: Implemented new filtering for vectorQueryTool and updated docs

## 0.1.0-alpha.6

### Patch Changes

- 016493a: Deprecate metrics in favor of evals

## 0.1.0-alpha.5

### Patch Changes

- 5fdc87c: Update evals storage in attachListeners

## 0.1.0-alpha.4

### Patch Changes

- 7892533: Updated test evals to use Mastra Storage

## 0.1.0-alpha.3

### Minor Changes

- 74b3078: Reduce verbosity in workflows API

## 0.1.0-alpha.2

### Minor Changes

- 8b416d9: Breaking changes

### Patch Changes

- 9c10484: update all packages

## 0.0.1-alpha.1

### Patch Changes

- ab04ad9: Update imports in docs

## 0.0.1-alpha.0

### Patch Changes

- a10b7a3: Implemented new filtering for vectorQueryTool and updated docs

## 0.1.1-alpha.25

### Patch Changes

- 8105fae: Split embed into embed and embedMany to handle different return types

## 0.1.1-alpha.24

### Patch Changes

- 9c0d010: Deprecated Reranker in favor of rerank function (BREAKING CHANGE)

## 0.1.1-alpha.23

### Patch Changes

- 3427b95: Updated docs to include intermediate rag examples (metadata filtering, query filters, etc)

## 0.1.1-alpha.22

### Patch Changes

- 0d5a03d: Vector store modules

## 0.1.1-alpha.21

### Patch Changes

- ee856f3: Updated pg filter function and updated docs and example

## 0.1.1-alpha.20

### Patch Changes

- 9ade36e: Changed measure for evals, added endpoints, attached metrics to agent, added ui for evals in playground, and updated docs

## 0.1.1-alpha.19

### Patch Changes

- ceb8086: Added hallucination metric and doc

## 0.1.1-alpha.18

### Patch Changes

- 27c933f: Added summarization and doc
- 07f45e7: Update evals to include all verdicts and updated docs

## 0.1.1-alpha.17

### Patch Changes

- c056555: Added faithfulness and updated docs

## 0.1.1-alpha.16

### Patch Changes

- 876b8a2: Rename difference metric to textual difference metric</doc><doc title="Feedback Setup" desc="docs page."># Docs Feedback Form - Airtable Setup Guide

## Overview

The feedback form is now implemented with Airtable integration. Follow these steps to set up data collection.

## Required Environment Variables

Add these to your `.env.local` file:

```bash
# Required: Your Airtable Personal Access Token
AIRTABLE_API_KEY=patXXXXXXXXXXXXXX

# Required: Your Airtable Base ID (starts with 'app')
AIRTABLE_BASE_ID=appXXXXXXXXXXXXXX

# Optional: Table name (defaults to "Feedback")
# Use the exact table name from Airtable - spaces are OK
AIRTABLE_TABLE_NAME=Docs Feedback
```

## Airtable Setup Steps

### 1. Create an Airtable Base

1. Go to [Airtable](https://airtable.com) and create a new base
2. Name it something like "Docs Feedback"

### 2. Create the Feedback Table

Create a table named "Feedback" (or "Docs Feedback" - either works) with these columns:

| Column Name       | Field Type       | Description                           |
| ----------------- | ---------------- | ------------------------------------- |
| **Feedback ID**   | Single line text | Unique identifier                     |
| **Feedback Text** | Long text        | The actual feedback content           |
| **Rating**        | Number           | Star rating (1-5)                     |
| **Email**         | Email            | User's email (optional)               |
| **Page URL**      | URL              | Which docs page the feedback is about |
| **User Agent**    | Long text        | Browser/device info                   |
| **Client IP**     | Single line text | User's IP address                     |
| **Timestamp**     | Date & time      | When feedback was submitted           |
| **Source**        | Single line text | Always "docs"                         |
| **Status**        | Single select    | New, In Review, Responded, Closed     |
| **Created Date**  | Date             | Date only (YYYY-MM-DD)                |

### 3. Get Your API Credentials

#### Get API Key:

1. Go to https://airtable.com/create/tokens
2. Create a new personal access token
3. Give it a name like "Docs Feedback"
4. Add these scopes:
   - `data.records:read`
   - `data.records:write`
5. Add access to your feedback base
6. Copy the token (starts with `pat`)

#### Get Base ID:

1. Go to https://airtable.com/api
2. Select your feedback base
3. Your base ID is shown in the URL and docs (starts with `app`)

### 4. Configure Environment

Create or update your `.env.local` file:

```bash
AIRTABLE_API_KEY=your_token_here
AIRTABLE_BASE_ID=your_base_id_here
AIRTABLE_TABLE_NAME=Feedback
```

### 5. Test the Integration

1. Start your development server: `npm run dev`
2. Go to any docs page
3. Click "Question? Give us feedback" at the bottom
4. Submit test feedback
5. Check your Airtable base to see the data

## Features

### What Gets Stored:

- ‚úÖ User feedback text
- ‚úÖ Star rating (1-5)
- ‚úÖ User email (optional)
- ‚úÖ Page URL where feedback was given
- ‚úÖ Browser/device information
- ‚úÖ Timestamp
- ‚úÖ Unique feedback ID
- ‚úÖ Status for tracking

### Error Handling:

- If Airtable fails, feedback is logged to console (fallback)
- Users still get success message
- Detailed error logging for debugging

### UI Features:

- Drawer-style form (slides from right)
- Star rating component
- Form validation
- Loading states
- Success/error feedback
- Mobile responsive

## Troubleshooting

### Common Issues:

1. **"Airtable configuration missing"**
   - Check your `.env.local` file exists
   - Verify `AIRTABLE_API_KEY` and `AIRTABLE_BASE_ID` are set
   - Restart your development server after adding env vars

2. **"422 Unprocessable Entity"**
   - Column names in Airtable don't match the API call
   - Verify all columns exist and have correct field types

3. **"401 Unauthorized"**
   - API key is incorrect or expired
   - Token doesn't have access to the base
   - Check token scopes include read/write permissions

4. **"403 Forbidden - Invalid permissions or model not found"**
   - API token doesn't have access to the base
   - Table name doesn't exist or is misspelled
   - Token scopes are insufficient
   - **Most common:** Check your `AIRTABLE_TABLE_NAME` matches exactly (case-sensitive)

5. **"404 Not Found"**
   - Base ID is incorrect
   - Table name doesn't match (check `AIRTABLE_TABLE_NAME`)

### Debug Mode:

Check the server console for detailed logs:

- üöÄ Request being sent to Airtable
- ‚úÖ Successful storage
- ‚ùå Error details

## Production Deployment

For production, make sure to:

1. Set environment variables in your hosting platform
2. Use a production Airtable base (separate from development)
3. Consider rate limiting for the API endpoint
4. Set up monitoring for failed submissions

## Alternative Storage Options

The API is designed to be extensible. You can easily add:

- Database storage (PostgreSQL, MongoDB)
- Email notifications
- Webhook integrations
- Multiple storage backends

Just modify the `sendToAirtable` function or add additional storage functions in the API route.</doc><doc title="README" desc="docs page."># **Contributing to the Docs**

Contributions to Mastra are welcome and highly appreciated.
If you'd like to contribute, see our list of open issues. We also welcome you to open a PR or a new issue with your question.

The first step is to clone the Repo

```bash
git clone git@github.com:mastra-ai/mastra.git
cd docs
```

## Environmental Variables

Some features of the docs won't work unless you have private keys for these projects.
These include:

- posthog
- form subscription
- analytics
- chatbot
- algolia search

Copy the Env file:

```bash
cp .env.example .env
```

## Dev Preview

Install the packages

```bash
npm i
```

> The docs have a separate `package.json` file and is not part of the workspace so please do not use
> `pnpm` or `yarn` to launch the docs.

Run the appropriate CLI command in your terminal:

```bash
npm run dev
```

The docs will be served on `localhost:3000/docs`.

## Search

Search is implemented with Algolia. To set up search functionality:

1. Create an Algolia account and application
2. Set up your environment variables in `.env.local`:

```bash
   NEXT_PUBLIC_ALGOLIA_APP_ID=your_app_id
   NEXT_PUBLIC_ALGOLIA_SEARCH_API_KEY=your_search_key
```

3. Index your documentation content in Algolia

For detailed setup instructions, see [ALGOLIA_SETUP.md](./ALGOLIA_SETUP.md).

## Making Changes

The Mastra docs use [MDX](https://mdxjs.com/).

Adding new content requires:

- YAML frontmatter
- A navigation entry in a `meta.ts` file
- Content for the docs

Frontmatter looks like this. title and description are mandatory.

```bash
---
title: "Introduction | Mastra Docs"
description: "Mastra is a TypeScript agent framework. It helps you build AI applications and features quickly. It gives you the set of primitives you need: workflows, agents, RAG, integrations, syncs and evals."
---
```

Navigation is defined in a relative `meta.ts` file. It modifies the title of the content in the sidebar

```ts
const meta = {
  overview: "Overview",
};

export default meta;
```

### Components and elements

Mastra is built on [Nextra](https://nextra.site/docs) and therefore we use custom components that `Nextra` provides which includes `callouts`, `Tabs` e.t.c

You can find the full list [on the nextra site](https://nextra.site/docs/built-ins)

### Guidelines

**Finding Something to Work On:**

1. Check the open issues labeled 'documentation' or 'good first issue'.
2. Identify areas that are unclear, missing, or incorrect.

**Making Changes:**

1. Create a new branch for your changes (`git checkout -b my-docs-update`).
2. Make your desired edits to the documentation files (usually found in the `docs/en` directory).
3. Commit your changes with clear and concise messages.

**Style Guide:**

1. Ensure your writing is clear, concise, and uses consistent formatting.

**Submitting Changes:**

1. Push your branch to your fork (`git push origin my-docs-update`).
2. Open a Pull Request (PR) against the main repository's `main` branch.
3. Clearly describe the changes you've made in the PR description.

**Review Process:**

1. Maintainers will review your PR.
2. Address any feedback or requested changes.
3. Once approved, your changes will be merged.

We appreciate your contributions to improving our documentation.</doc><doc title="Example Text Generation" desc="docs page."># Mastra Reference Documentation

This is a guide for LLMs for creating explanatory text for examples. When you are writing a new example, you can use this guide to create the text.

---

## Prompt

Write 2-3 sentences describing the purpose of the code, or providing an overview of a topic. Be friendly (not too friendly!), but concise. You are providing documentation to software engineers.

The first sentence or two should describe the problem that is being solved by the concept that is being described. Avoid third-party words like "developers" in favor of second person words like "you."

## Examples

**Topic: Describing an image**

**Purpose Sentence:** "Vision-enabled language models can process both text and images, but sending both requires specific message formatting."

**Topic: Calling Google Gemini**

**Purpose Sentence:** "Mastra provides a unified interface for working with various LLM providers, handling the complexity of different API implementations."

**Topic: Streaming Objects**

**Purpose Sentence:** "By streaming the output, you can display partial results as they arrive, providing immediate feedback to users."

The last sentence should describe the purpose of the code.

The text should be to the point, without flourishes ("shows" rather than "demonstrates").

Avoid referencing a specific model unless it is part of the title of the page.

**Topic: Streaming Object**

**Description sentence:** This example shows how to stream JSON-formatted responses using a Zod schema.</doc><doc title="Reference Guide" desc="docs page."># Mastra Reference Documentation

This is a guide for community members (and LLMs!) for creating new reference docs and editing existing ones.

Mastra organizes its reference documentation in folders with the same structure as its core concepts: `CLI`,`LLMs and Models`, `Agents`, `Engines`, `RAG`, `Observability`. Each function gets its own page, such as `src/pages/reference/agents/createTool.mdx`.

We try to stay away from creating classes because it's not very TypeScript-y, but they get their own pages too.

Below is a guide for reference documentation on a function. They illustrate `Parameters` and `Returns`, using a <PropertiesTable> component to list options, types, and defaults.

---

## 1. Title and Brief Description

Start each reference page with a clear title and a short paragraph describing what the function, class, or feature does and why a user might need it.

```markdown
# MyFunction Reference

The MyFunction utility in Mastra allows you to transform data before passing it to the engine.
```

---

## 2. Usage Example

Provide a concise usage example or code snippet that shows how to import and use this function or feature in a typical Mastra project.

```typescript
import { MyFunction } from "@mastra/core";

const result = MyFunction({
  data: "some data",
  options: {
    verbose: true,
  },
});
```

---

## 3. Parameters

Under a ‚ÄúParameters‚Äù heading, list the function‚Äôs input parameters, including any nested properties. Use the <PropertiesTable> component to provide structured information about each parameter, such as its type, whether it‚Äôs optional, and default values.

For example:

```mdx
## Parameters

<PropertiesTable
  content={[
    {
      name: "data",
      type: "string",
      description: "The input data to be transformed.",
      isOptional: false,
    },
    {
      name: "options",
      type: "object",
      description: "Additional options that modify the behavior of MyFunction.",
      isOptional: true,
      defaultValue: "{}",
    },
  ]}
/>
```

If the `options` object has its own properties, you can create a separate <PropertiesTable> to describe them:

```mdx
### options

<PropertiesTable
  content={[
    {
      name: "verbose",
      type: "boolean",
      description: "Enables detailed logging when 'true'.",
      isOptional: true,
      defaultValue: "false",
    },
  ]}
/>
```

---

## 4. Returns

If your function (or class method) returns a value, create a ‚ÄúReturns‚Äù heading. Briefly describe what the function returns and use <PropertiesTable> if the returned object has additional properties.

```mdx
## Returns

<PropertiesTable
  content={[
    {
      name: "transformedData",
      type: "string",
      description:
        "The final transformed data after applying the function logic.",
    },
    {
      name: "metadata",
      type: "object",
      description: "Additional information about the transformation.",
    },
  ]}
/>
```

## 5. Additional Notes or Examples

If there are advanced use cases, edge cases, or performance considerations, add them in a separate section. Consider referencing relevant files or sections of code if they provide additional clarity.

````markdown
## Additional Examples

For a more advanced usage, see ‚ÄútransformDataSync‚Äù in the following file:

```ts filename="src/examples/advancedUsage/transformDataSync.ts"
import { MyFunction } from "@mastra/core";

export async function transformDataSync(data: string) {
  const result = await MyFunction({
    data,
    options: { verbose: false },
  });
  return result;
}
```
````

## 6. Cross-Link to Related Docs

Where possible, link to any other relevant references‚Äîlike other methods or classes that work closely with the feature. This helps users discover related functionality.

```markdown
### Related

- [Engine Configuration](/guide/reference/engine.mdx)
- [Agent Class Reference](/guide/reference/agent.mdx)
```

## Conclusion

By consistently following these guidelines, you ensure that Mastra‚Äôs reference documentation remains clear, easy to navigate, and provides all the essential details community members need to use Mastra effectively.

- Start with a concise **description**.
- Provide a **usage example**.
- Present **parameters** in a `<PropertiesTable>`.
- Show **returns** in another `<PropertiesTable>` (if applicable).
- Include **additional examples** or **notes** for advanced usage.
- **Cross-link** to relevant sections or features.</doc><doc title="Claude" desc="reference page."># CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Development Commands

### Setup and Build

- `pnpm run setup` - Install dependencies and build CLI (required first step)
- `pnpm build` - Build all packages (excludes examples and docs)
- `pnpm build:packages` - Build core packages only
- `pnpm build:core` - Build core framework package
- `pnpm build:cli` - Build CLI and playground package
- `pnpm build:memory` - Build memory package
- `pnpm build:rag` - Build RAG package
- `pnpm build:combined-stores` - Build all storage adapters
- `pnpm build:deployers` - Build deployment adapters
- `pnpm build:evals` - Build evaluation framework
- `NODE_OPTIONS="--max-old-space-size=4096" pnpm build` - Build with increased memory if needed

### Testing

- `pnpm dev:services:up` - Start local Docker services (required for integration tests)
- For faster testing: Build from root, then cd to specific package and run tests there
  ```bash
  pnpm build  # Build from monorepo root first
  cd packages/memory
  pnpm test   # Much faster than running all tests
  ```
- `pnpm test` - Run all tests (slow, use sparingly)
- `pnpm test:watch` - Run tests in watch mode
- Package-specific tests: `pnpm test:core`, `pnpm test:cli`, `pnpm test:memory`, `pnpm test:rag`, etc.

### Development

- `pnpm dev:services:down` - Stop local Docker services
- `pnpm typecheck` - Run TypeScript checks across all packages
- `pnpm prettier:format` - Format code with Prettier
- `pnpm format` - Run linting across all packages with auto-fix (excludes examples, docs, integrations, playground)

## Documentation

### Documentation Locations

- **Main docs**: `docs/` directory - Contains the full documentation site built with Next.js
- **Course content**: `docs/src/course/` - Tutorial and learning materials
- **API reference**: Generated from code comments and exported types
- **Package READMEs**: Each package/integration has its own README.md
- **Development guide**: `DEVELOPMENT.md` - Setup and contribution instructions

### Documentation Guidelines

- Follow `.cursor/rules/writing-documentation.mdc` for writing style
- Avoid marketing language, focus on technical implementation details
- Examples should be practical and runnable

## Architecture Overview

Mastra is a modular AI framework built around central orchestration with pluggable components. Key architectural patterns:

### Core Components

- **Mastra Class** (`packages/core/src/mastra/`) - Central configuration hub with dependency injection
- **Agents** (`packages/core/src/agent/`) - Primary AI interaction abstraction with tools, memory, and voice
- **Tools System** (`packages/core/src/tools/`) - Dynamic tool composition supporting multiple sources
- **Memory System** (`packages/core/src/memory/`) - Thread-based conversation persistence with semantic recall
- **Workflows** (`packages/core/src/workflows/`) - Step-based execution with suspend/resume capabilities
- **Storage Layer** (`packages/core/src/storage/`) - Pluggable backends with standardized interfaces

### Package Structure

- **packages/** - Core framework packages (core, cli, deployer, rag, memory, evals, mcp, server)
- **stores/** - Storage adapters (pg, chroma, pinecone, etc.)
- **deployers/** - Platform deployment adapters (vercel, netlify, cloudflare)
- **speech/** - Speech processing packages (voice synthesis and recognition)
- **client-sdks/** - Client libraries for different platforms
- **integrations/** - Third-party API integrations (github, firecrawl, etc.)
- **examples/** - Demo applications
- **auth/** - Authentication provider integrations

### Key Patterns

1. **Dependency Injection** - Components register with central Mastra instance
2. **Plugin Architecture** - Pluggable storage, vectors, memory, deployers
3. **Runtime Context** - Request-scoped context propagation for dynamic configuration
4. **Message List Abstraction** - Unified message handling across formats

### Tools and Integrations

- Tools are dynamically composed from multiple sources (assigned, memory, toolsets, MCP)
- Integrations are OpenAPI-based with OAuth/API key authentication
- MCP (Model Context Protocol) enables external tool integration

### Storage and Memory

- Pluggable storage backends with standardized interfaces
- Memory system supports thread-based conversations, semantic recall, and working memory
- Vector stores provide semantic search capabilities

## Development Guidelines

### Documentation Writing

Follow `.cursor/rules/writing-documentation.mdc`:

- Avoid marketing language ("powerful", "complete", "out-of-the-box")
- Don't use "your needs", "production-ready", "makes it easy"
- Focus on technical details rather than benefits
- Write for engineers, not marketing

### Monorepo Management

- Use pnpm (v9.7.0+) for package management
- Build dependencies are managed through turbo.json
- All packages use TypeScript with strict type checking
- For testing: build from root first, then cd to specific package for faster iteration

### Component Development

- Components should integrate with central Mastra orchestration
- Follow plugin patterns for extensibility
- Implement standardized interfaces for storage/vector operations
- Use telemetry decorators for observability
- Support both sync and async operations where applicable

### Testing Strategy

- Integration tests require Docker services (`pnpm dev:services:up`)
- Use Vitest for testing framework
- Test files should be co-located with source code
- For faster development: build from root, then test individual packages
- Mock external services in unit tests

### Common Issues

- Memory errors during build: Use `NODE_OPTIONS="--max-old-space-size=4096"`
- Missing dependencies: Run `pnpm setup` first
- Test failures: Ensure Docker services are running and build from root first
- Type errors: Run `pnpm typecheck` to check all packages
</doc></docs><examples><doc title="Meta" desc="worked example.">const meta = {
  "calling-agents": "Calling Agents",
  "system-prompt": "Changing the System Prompt",
  "using-a-tool": "Adding a Tool",
  "using-a-workflow": "Adding a Workflow",
  "supervisor-agent": "Supervisor Agent",
  "image-analysis": "Image Analysis",
  "adding-voice-capabilities": "Using Voice",
  "dynamic-agents": "Dynamic Context",
  "deploying-mcp-server": "Deploying an MCPServer",
  "ai-sdk-v5-integration": "AI SDK v5 Integration",
};

export default meta;</doc><doc title="Meta" desc="worked example.">const meta = {
  index: "Overview",
  "auth-middleware": "Auth Middleware",
  "cors-middleware": "CORS Middleware",
  "logging-middleware": "Logging Middleware",
  "custom-api-route": "Custom API Route",
  "deploying-mastra-server": "Deploying a Mastra Server",
};

export default meta;</doc><doc title="Meta" desc="worked example.">const meta = {
  "answer-relevancy": "Answer Relevancy",
  bias: "Bias",
  completeness: "Completeness",
  "content-similarity": "Content Similarity",
  "context-position": "Context Position",
  "context-precision": "Context Precision",
  "context-relevancy": "Context Relevancy",
  "contextual-recall": "Contextual Recall",
  faithfulness: "Faithfulness",
  hallucination: "Hallucination",
  "keyword-coverage": "Keyword Coverage",
  "prompt-alignment": "Prompt Alignment",
  summarization: "Summarization",
  "textual-difference": "Textual Difference",
  "tone-consistency": "Tone Consistency",
  toxicity: "Toxicity",
  "custom-llm-judge-eval": "LLM as a Judge",
  "custom-native-javascript-eval": "Native JavaScript",
};
export default meta;</doc><doc title="Meta" desc="worked example.">const meta = {
  "working-memory-basic": "Basic Working Memory",
  "working-memory-template": "Memory with Template",
  "working-memory-schema": "Memory with Schema",
  "memory-processors": "Memory Processors",
  "memory-with-libsql": "Memory with LibSQL",
  "memory-with-pg": "Memory with PostgreSQL",
  "memory-with-upstash": "Memory with Upstash",
};

export default meta;</doc><doc title="Meta" desc="worked example.">const meta = {
  "basic-ai-tracing": "Basic AI Tracing",
};

export default meta;</doc><doc title="Meta" desc="worked example.">const meta = {
  chunking: {
    title: "Chunking",
  },
  embedding: {
    title: "Embedding",
  },
  upsert: {
    title: "Upsert",
  },
  query: {
    title: "Query",
  },
  rerank: {
    title: "Rerank",
  },
  usage: {
    title: "Usage",
  },
};

export default meta;</doc></examples></project>